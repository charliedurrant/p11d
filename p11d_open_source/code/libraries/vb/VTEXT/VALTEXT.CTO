VERSION 5.00
Object = "{80CAD458-7206-11D1-BAF2-00C04FA4C373}#4.0#0"; "TXTALIGN.OCX"
Begin VB.UserControl ValText 
   ClientHeight    =   3600
   ClientLeft      =   0
   ClientTop       =   0
   ClientWidth     =   4800
   ScaleHeight     =   3600
   ScaleWidth      =   4800
   ToolboxBitmap   =   "valtext.ctx":0000
   Begin pTxtAlign.TXTAlign txtControl 
      Height          =   495
      Left            =   0
      TabIndex        =   0
      Top             =   0
      Width           =   2175
      _ExtentX        =   3836
      _ExtentY        =   873
   End
End
Attribute VB_Name = "ValText"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Option Explicit
Public Enum DataTypes
  T_LONG
  T_DOUBLE
  T_DATE
  T_STRING
  T_LIST
  T_USER
End Enum
'Default Property Texts:
Const m_def_ValidColor = &H80000005
Const m_def_InvalidColor = &HFF&
Const m_def_AllowEmpty = -1
Const m_def_List = 0
Const m_def_Type = 0
Const m_def_ValidationText = ""
Const m_def_Maximum = Empty
Const m_def_Minimum = Empty


'Property Variables:
Dim m_ValidColor As OLE_COLOR
Dim m_InvalidColor As OLE_COLOR
Dim m_AllowEmpty As Boolean
Dim m_List As Variant
Dim m_TypeOfData As Variant
Dim m_Maximum As Variant
Dim m_Minimum As Variant
Dim m_ValidationText As String
Dim m_FieldInvalid As Boolean

'Event Declarations:
Event Change() 'MappingInfo=Text1,Text1,-1,Change
Event FieldInvalid(Valid As Boolean, Message As String)
Event Click() 'MappingInfo=txtControl,txtControl,-1,Click
Event DblClick() 'MappingInfo=txtControl,txtControl,-1,DblClick
Event KeyDown(KeyCode As Integer, Shift As Integer) 'MappingInfo=txtControl,txtControl,-1,KeyDown
Event KeyPress(KeyAscii As Integer) 'MappingInfo=txtControl,txtControl,-1,KeyPress
Event KeyUp(KeyCode As Integer, Shift As Integer) 'MappingInfo=txtControl,txtControl,-1,KeyUp
Event MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single) 'MappingInfo=txtControl,txtControl,-1,MouseDown
Event MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single) 'MappingInfo=txtControl,txtControl,-1,MouseMove
Event MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single) 'MappingInfo=txtControl,txtControl,-1,MouseUp
Event UserValidate(Valid As Boolean, Message As String, sTextEntered As String)
'WARNING! DO NOT REMOVE OR MODIFY THE FOLLOWING COMMENTED LINES!
'MappingInfo=txtControl,txtControl,-1,BackColor
Public Property Get BackColor() As OLE_COLOR
Attribute BackColor.VB_Description = "Returns/sets the background color used to display text and graphics in an object."
  BackColor = txtControl.BackColor
End Property
Public Property Get FieldInvalid() As Boolean
  FieldInvalid = m_FieldInvalid
End Property

Public Property Let BackColor(ByVal New_BackColor As OLE_COLOR)
  txtControl.BackColor() = New_BackColor
  PropertyChanged "BackColor"
End Property

'WARNING! DO NOT REMOVE OR MODIFY THE FOLLOWING COMMENTED LINES!
'MappingInfo=txtControl,txtControl,-1,ForeColor
Public Property Get ForeColor() As OLE_COLOR
Attribute ForeColor.VB_Description = "Returns/sets the foreground color used to display text and graphics in an object."
  ForeColor = txtControl.ForeColor
End Property

Public Property Let ForeColor(ByVal New_ForeColor As OLE_COLOR)
  txtControl.ForeColor() = New_ForeColor
  PropertyChanged "ForeColor"
End Property

'WARNING! DO NOT REMOVE OR MODIFY THE FOLLOWING COMMENTED LINES!
'MappingInfo=txtControl,txtControl,-1,Enabled
Public Property Get Enabled() As Boolean
Attribute Enabled.VB_Description = "Returns/sets a value that determines whether an object can respond to user-generated events."
  Enabled = txtControl.Enabled
End Property

Public Property Let Enabled(ByVal New_Enabled As Boolean)
  txtControl.Enabled() = New_Enabled
  PropertyChanged "Enabled"
End Property

'WARNING! DO NOT REMOVE OR MODIFY THE FOLLOWING COMMENTED LINES!
'MappingInfo=txtControl,txtControl,-1,Font
Public Property Get Font() As Font
Attribute Font.VB_Description = "Returns a Font object."
Attribute Font.VB_UserMemId = -512
  Set Font = txtControl.Font
End Property

Public Property Set Font(ByVal New_Font As Font)
  Set txtControl.Font = New_Font
  PropertyChanged "Font"
End Property

'WARNING! DO NOT REMOVE OR MODIFY THE FOLLOWING COMMENTED LINES!
'MappingInfo=txtControl,txtControl,-1,BorderStyle
Public Property Get BorderStyle() As Integer
Attribute BorderStyle.VB_Description = "Returns/sets the border style for an object."
  BorderStyle = txtControl.BorderStyle
End Property

'WARNING! DO NOT REMOVE OR MODIFY THE FOLLOWING COMMENTED LINES!
'MappingInfo=txtControl,txtControl,-1,Refresh
Public Sub Refresh()
Attribute Refresh.VB_Description = "Forces a complete repaint of a object."
  txtControl.Refresh
End Sub

Private Sub txtControl_Change()
  Call Validate
  RaiseEvent Change
End Sub

Private Sub txtControl_Click()
  RaiseEvent Click
End Sub

Private Sub txtControl_DblClick()
  RaiseEvent DblClick
End Sub

Private Sub txtControl_KeyDown(KeyCode As Integer, Shift As Integer)
  RaiseEvent KeyDown(KeyCode, Shift)
End Sub

Private Sub txtControl_KeyPress(KeyAscii As Integer)
'  If KeyAscii = 13 Then
'    lstItems.Visible = True
'    usercontrol.Height = txtControl.Height + lstItems.Height
'    lstItems.SetFocus
'  End If
  RaiseEvent KeyPress(KeyAscii)
End Sub

Private Sub txtControl_KeyUp(KeyCode As Integer, Shift As Integer)
  RaiseEvent KeyUp(KeyCode, Shift)
End Sub

Private Sub txtControl_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
  RaiseEvent MouseDown(Button, Shift, X, Y)
End Sub



Private Sub txtControl_MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
  RaiseEvent MouseMove(Button, Shift, X, Y)
End Sub

Private Sub txtControl_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
  RaiseEvent MouseUp(Button, Shift, X, Y)
End Sub

'WARNING! DO NOT REMOVE OR MODIFY THE FOLLOWING COMMENTED LINES!
'MappingInfo=txtControl,txtControl,-1,Alignment
Public Property Get Alignment() As Integer
Attribute Alignment.VB_Description = "Returns/sets the alignment of a CheckBox or OptionButton, or a control's text."
  Alignment = txtControl.Alignment
End Property

'WARNING! DO NOT REMOVE OR MODIFY THE FOLLOWING COMMENTED LINES!
'MappingInfo=txtControl,txtControl,-1,Appearance
Public Property Get Appearance() As Integer
Attribute Appearance.VB_Description = "Returns/sets whether or not an object is painted at run time with 3-D effects."
  Appearance = txtControl.Appearance
End Property

'WARNING! DO NOT REMOVE OR MODIFY THE FOLLOWING COMMENTED LINES!
'MappingInfo=txtControl,txtControl,-1,Locked
Public Property Get Locked() As Boolean
Attribute Locked.VB_Description = "Determines whether a control can be edited."
  Locked = txtControl.Locked
End Property

Public Property Let Locked(ByVal New_Locked As Boolean)
  txtControl.Locked() = New_Locked
  PropertyChanged "Locked"
End Property

'WARNING! DO NOT REMOVE OR MODIFY THE FOLLOWING COMMENTED LINES!
'MappingInfo=txtControl,txtControl,-1,MaxLength
Public Property Get MaxLength() As Long
Attribute MaxLength.VB_Description = "Returns/sets the maximum number of characters that can be entered in a control."
  MaxLength = txtControl.MaxLength
End Property

Public Property Let MaxLength(ByVal New_MaxLength As Long)
  txtControl.MaxLength() = New_MaxLength
  PropertyChanged "MaxLength"
End Property

Public Property Get ValidationText() As String
  ValidationText = m_ValidationText
End Property

Public Property Let ValidationText(ByVal New_ValidationText As String)
   m_ValidationText = New_ValidationText
  PropertyChanged " ValidationText"
End Property

'WARNING! DO NOT REMOVE OR MODIFY THE FOLLOWING COMMENTED LINES!
'MappingInfo=txtControl,txtControl,-1,MouseIcon
Public Property Get MouseIcon() As Picture
Attribute MouseIcon.VB_Description = "Sets a custom mouse icon."
  Set MouseIcon = txtControl.MouseIcon
End Property

Public Property Set MouseIcon(ByVal New_MouseIcon As Picture)
  Set txtControl.MouseIcon = New_MouseIcon
  PropertyChanged "MouseIcon"
End Property

'WARNING! DO NOT REMOVE OR MODIFY THE FOLLOWING COMMENTED LINES!
'MappingInfo=txtControl,txtControl,-1,MousePointer
Public Property Get MousePointer() As Integer
Attribute MousePointer.VB_Description = "Returns/sets the type of mouse pointer displayed when over part of an object."
  MousePointer = txtControl.MousePointer
End Property

Public Property Let MousePointer(ByVal New_MousePointer As Integer)
  txtControl.MousePointer() = New_MousePointer
  PropertyChanged "MousePointer"
End Property

'WARNING! DO NOT REMOVE OR MODIFY THE FOLLOWING COMMENTED LINES!
'MappingInfo=txtControl,txtControl,-1,MultiLine
Public Property Get MultiLine() As Boolean
Attribute MultiLine.VB_Description = "Returns/sets a value that determines whether a control can accept multiple lines of text."
  MultiLine = txtControl.MultiLine
End Property

'WARNING! DO NOT REMOVE OR MODIFY THE FOLLOWING COMMENTED LINES!
'MappingInfo=txtControl,txtControl,-1,PasswordChar
Public Property Get PasswordChar() As String
Attribute PasswordChar.VB_Description = "Returns/sets a value that determines whether characters typed by a user or placeholder characters are displayed in a control."
  PasswordChar = txtControl.PasswordChar
End Property

Public Property Let PasswordChar(ByVal New_PasswordChar As String)
  txtControl.PasswordChar() = New_PasswordChar
  PropertyChanged "PasswordChar"
End Property

'WARNING! DO NOT REMOVE OR MODIFY THE FOLLOWING COMMENTED LINES!
'MappingInfo=txtControl,txtControl,-1,SelLength
Public Property Get SelLength() As Long
Attribute SelLength.VB_Description = "Returns/sets the number of characters selected."
  SelLength = txtControl.SelLength
End Property

Public Property Let SelLength(ByVal New_SelLength As Long)
  txtControl.SelLength() = New_SelLength
  PropertyChanged "SelLength"
End Property

'WARNING! DO NOT REMOVE OR MODIFY THE FOLLOWING COMMENTED LINES!
'MappingInfo=txtControl,txtControl,-1,SelStart
Public Property Get SelStart() As Long
Attribute SelStart.VB_Description = "Returns/sets the starting point of text selected."
  SelStart = txtControl.SelStart
End Property

Public Property Let SelStart(ByVal New_SelStart As Long)
  txtControl.SelStart() = New_SelStart
  PropertyChanged "SelStart"
End Property

'WARNING! DO NOT REMOVE OR MODIFY THE FOLLOWING COMMENTED LINES!
'MappingInfo=txtControl,txtControl,-1,SelText
Public Property Get SelText() As String
Attribute SelText.VB_Description = "Returns/sets the string containing the currently selected text."
  SelText = txtControl.SelText
End Property

Public Property Let SelText(ByVal New_SelText As String)
  txtControl.SelText() = New_SelText
  PropertyChanged "SelText"
End Property

'WARNING! DO NOT REMOVE OR MODIFY THE FOLLOWING COMMENTED LINES!
'MappingInfo=txtControl,txtControl,-1,Text
Public Property Get Text() As String
Attribute Text.VB_Description = "Returns/sets the text contained in the control."
  Text = txtControl.Text
End Property

Public Property Let Text(ByVal New_Text As String)
  txtControl.Text = New_Text
  PropertyChanged "Text"
End Property

'WARNING! DO NOT REMOVE OR MODIFY THE FOLLOWING COMMENTED LINES!
'MappingInfo=txtControl,txtControl,-1,WhatsThisHelpID
Public Property Get WhatsThisHelpID() As Long
Attribute WhatsThisHelpID.VB_Description = "Returns/sets an associated context number for an object."
  WhatsThisHelpID = txtControl.WhatsThisHelpID
End Property

Public Property Let WhatsThisHelpID(ByVal New_WhatsThisHelpID As Long)
  txtControl.WhatsThisHelpID() = New_WhatsThisHelpID
  PropertyChanged "WhatsThisHelpID"
End Property

'WARNING! DO NOT REMOVE OR MODIFY THE FOLLOWING COMMENTED LINES!
'MappingInfo=txtControl,txtControl,-1,ToolTipText
Public Property Get ToolTipText() As String
Attribute ToolTipText.VB_Description = "Returns/sets the text displayed when the mouse is paused over the control."
  ToolTipText = txtControl.ToolTipText
End Property

Public Property Let ToolTipText(ByVal New_ToolTipText As String)
  txtControl.ToolTipText() = New_ToolTipText
  PropertyChanged "ToolTipText"
End Property

Public Property Get TypeOfData() As DataTypes
  TypeOfData = m_TypeOfData
End Property

Public Property Let TypeOfData(ByVal New_TypeOfData As DataTypes)
  m_TypeOfData = New_TypeOfData
  m_Minimum = Empty
  m_Maximum = Empty
  PropertyChanged "TypeOfData"
End Property

Public Function Validate() As Boolean
Dim s As String, sErrMsg$
Dim l As Long, bValid As Boolean

  bValid = True
  sErrMsg = ""
  s = txtControl.Text
  If (m_AllowEmpty = True And s = "") Then GoTo change_exit
  Select Case m_TypeOfData
    Case T_LONG
      If IsNumeric(s) Then
        If IsEmpty(m_Maximum) Or (CLng(s) <= CLng(m_Maximum)) Then
          If Not (IsEmpty(m_Minimum) Or (CLng(s) >= CLng(m_Minimum))) Then
            bValid = False
            sErrMsg = "Invalid integer number entered. The Text should be greater than or equal to " & m_Minimum
          End If
        Else
          bValid = False
          sErrMsg = "Invalid integer number entered. The Text should be less than or equal to " & m_Maximum
        End If
      Else
        bValid = False
        sErrMsg = "Unable to convert your entry into a number."
      End If
    Case T_DOUBLE
      If IsNumeric(s) Then
        If IsEmpty(m_Maximum) Or (CDbl(s) <= CDbl(m_Maximum)) Then
          If IsEmpty(m_Minimum) Or (CDbl(s) >= CDbl(m_Minimum)) Then
            RaiseEvent FieldInvalid(True, "")
            txtControl.BackColor = m_ValidColor
          Else
            bValid = False
            sErrMsg = "Invalid decimal number entered. The Text should be greater than or equal to " & m_Minimum
          End If
        Else
          bValid = False
          sErrMsg = "Invalid decimal number entered. The Text should be less than or equal to " & m_Maximum
        End If
      Else
        bValid = False
        sErrMsg = "Unable to convert your entry into a number."
      End If
    Case T_STRING
      If Not ((Len(m_ValidationText) = 0) Or s Like m_ValidationText) Then
        bValid = False
        sErrMsg = "Unable to format entry into the format" & m_ValidationText
      End If
    Case T_DATE
      If IsDate(s) Then
        If (s Like "##/##/####") Then
          If IsEmpty(m_Maximum) Or (CDate(s) <= CDate(m_Maximum)) Then
            If Not (IsEmpty(m_Minimum) Or (CDate(s) >= CDate(m_Minimum))) Then
              bValid = False
              sErrMsg = "Invalid date Text entered. The Text should be greater than " & Format$(m_Minimum, "dd/mm/yyyy")
            End If
          Else
            bValid = False
            sErrMsg = "Invalid date Text entered. The Text should be less than " & Format$(m_Maximum, "dd/mm/yyyy")
          End If
        Else
          bValid = False
          sErrMsg = "Please include the full year in the date."
        End If
      Else
        bValid = False
        sErrMsg = "Unable to convert your entry into a date."
      End If
    Case T_USER
      RaiseEvent UserValidate(bValid, sErrMsg, s)
    Case T_LIST
      For l = LBound(m_List) To UBound(m_List)
        If UCase(s) = UCase(m_List(l)) Then
          txtControl.Text = m_List(l)
          txtControl.SelStart = Len(m_List(l))
          Exit For
        End If
      Next l
      If l > UBound(m_List) Then
        bValid = False
        sErrMsg = "The entry you have made is not in the list of valid entries."
      End If
  End Select
change_exit:
  If bValid Then
    txtControl.BackColor = m_ValidColor
  Else
    txtControl.BackColor = m_InvalidColor
  End If
  m_FieldInvalid = Not (bValid)
  RaiseEvent FieldInvalid(bValid, sErrMsg)
End Function

Public Property Get Maximum() As Variant
Attribute Maximum.VB_Description = "The maximum value to be entered into this box"
  Maximum = m_Maximum
End Property

Public Property Let Maximum(ByVal New_Maximum As Variant)
  m_Maximum = New_Maximum
  PropertyChanged "Maximum"
End Property

Public Property Get Minimum() As Variant
Attribute Minimum.VB_Description = "The minimun value to be entered into this box"
  Minimum = m_Minimum
End Property

Public Property Let Minimum(ByVal New_Minimum As Variant)
  m_Minimum = New_Minimum
  PropertyChanged "Minimum"
End Property


'Initialize Properties for User Control
Private Sub usercontrol_InitProperties()
  m_TypeOfData = m_def_Type
  m_Maximum = m_def_Maximum
  m_Minimum = m_def_Minimum
  m_List = m_def_List
  m_AllowEmpty = m_def_AllowEmpty
  m_ValidationText = m_def_ValidationText
  If Ambient.UserMode Then Call Validate
  m_ValidColor = m_def_ValidColor
  m_InvalidColor = m_def_InvalidColor
End Sub

'Load property Texts from storage
Private Sub usercontrol_ReadProperties(PropBag As PropertyBag)

  txtControl.BackColor = PropBag.ReadProperty("BackColor", &H80000005)
  txtControl.ForeColor = PropBag.ReadProperty("ForeColor", &H80000008)
  txtControl.Enabled = PropBag.ReadProperty("Enabled", True)
  Set Font = PropBag.ReadProperty("Font", Ambient.Font)
  txtControl.Locked = PropBag.ReadProperty("Locked", False)
  txtControl.MaxLength = PropBag.ReadProperty("MaxLength", 0)
  Set MouseIcon = PropBag.ReadProperty("MouseIcon", Nothing)
  txtControl.MousePointer = PropBag.ReadProperty("MousePointer", 0)
  txtControl.PasswordChar = PropBag.ReadProperty("PasswordChar", "")
  txtControl.SelLength = PropBag.ReadProperty("SelLength", 0)
  txtControl.SelStart = PropBag.ReadProperty("SelStart", 0)
  txtControl.SelText = PropBag.ReadProperty("SelText", "")
  txtControl.Text = PropBag.ReadProperty("Text", "txtControl")
  txtControl.WhatsThisHelpID = PropBag.ReadProperty("WhatsThisHelpID", 0)
  txtControl.ToolTipText = PropBag.ReadProperty("ToolTipText", "")
  m_TypeOfData = PropBag.ReadProperty("TypeOfData", m_def_Type)
  m_Maximum = PropBag.ReadProperty("Maximum", m_def_Maximum)
  m_Minimum = PropBag.ReadProperty("Minimum", m_def_Minimum)
  m_List = PropBag.ReadProperty("List", m_def_List)
  m_AllowEmpty = PropBag.ReadProperty("AllowEmpty", m_def_AllowEmpty)
  m_ValidationText = PropBag.ReadProperty("ValidationText", m_def_ValidationText)
  m_ValidColor = PropBag.ReadProperty("ValidColor", m_def_ValidColor)
  m_InvalidColor = PropBag.ReadProperty("InvalidColor", m_def_InvalidColor)
End Sub

Private Sub usercontrol_Resize()

    txtControl.Height = UserControl.Height
    txtControl.Width = UserControl.Width
End Sub

Private Sub usercontrol_Show()
  If Ambient.UserMode Then Call Validate
End Sub

'Write property Texts to storage
Private Sub usercontrol_WriteProperties(PropBag As PropertyBag)

  Call PropBag.WriteProperty("BackColor", txtControl.BackColor, &H80000005)
  Call PropBag.WriteProperty("ForeColor", txtControl.ForeColor, &H80000008)
  Call PropBag.WriteProperty("Enabled", txtControl.Enabled, True)
  Call PropBag.WriteProperty("Font", Font, Ambient.Font)
  Call PropBag.WriteProperty("Locked", txtControl.Locked, False)
  Call PropBag.WriteProperty("MaxLength", txtControl.MaxLength, 0)
  Call PropBag.WriteProperty("MouseIcon", MouseIcon, Nothing)
  Call PropBag.WriteProperty("MousePointer", txtControl.MousePointer, 0)
  Call PropBag.WriteProperty("PasswordChar", txtControl.PasswordChar, "")
  Call PropBag.WriteProperty("SelLength", txtControl.SelLength, 0)
  Call PropBag.WriteProperty("SelStart", txtControl.SelStart, 0)
  Call PropBag.WriteProperty("SelText", txtControl.SelText, "")
  Call PropBag.WriteProperty("Text", txtControl.Text, "txtControl")
  Call PropBag.WriteProperty("WhatsThisHelpID", txtControl.WhatsThisHelpID, 0)
  Call PropBag.WriteProperty("ToolTipText", txtControl.ToolTipText, "")
  Call PropBag.WriteProperty("TypeOfData", m_TypeOfData, m_def_Type)
  Call PropBag.WriteProperty("Maximum", m_Maximum, m_def_Maximum)
  Call PropBag.WriteProperty("Minimum", m_Minimum, m_def_Minimum)
  Call PropBag.WriteProperty("List", m_List, m_def_List)
  Call PropBag.WriteProperty("AllowEmpty", m_AllowEmpty, m_def_AllowEmpty)
  Call PropBag.WriteProperty("ValidationText", m_ValidationText, m_def_ValidationText)
  Call PropBag.WriteProperty("ValidColor", m_ValidColor, m_def_ValidColor)
  Call PropBag.WriteProperty("InvalidColor", m_InvalidColor, m_def_InvalidColor)
End Sub

Public Property Get List() As Variant
  List = m_List
End Property

Public Property Let List(ByVal New_List As Variant)
Dim i As Long
  m_List = New_List
'  lstItems.Clear
'  For i = LBound(m_List) To UBound(m_List)
'    lstItems.AddItem (m_List(i))
'  Next i
  PropertyChanged "List"
End Property

Public Property Get AllowEmpty() As Boolean
  AllowEmpty = m_AllowEmpty
End Property

Public Property Let AllowEmpty(ByVal New_AllowEmpty As Boolean)
  If Ambient.UserMode Then Err.Raise 393
  m_AllowEmpty = New_AllowEmpty
  PropertyChanged "AllowEmpty"
End Property

Public Property Get ValidColor() As OLE_COLOR
  ValidColor = m_ValidColor
End Property

Public Property Let ValidColor(ByVal New_ValidColor As OLE_COLOR)
  m_ValidColor = New_ValidColor
  PropertyChanged "ValidColor"
End Property

Public Property Get InvalidColor() As OLE_COLOR
  InvalidColor = m_InvalidColor
End Property

Public Property Let InvalidColor(ByVal New_InvalidColor As OLE_COLOR)
  m_InvalidColor = New_InvalidColor
  PropertyChanged "InvalidColor"
End Property

